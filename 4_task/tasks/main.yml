---
- name: Установка PyMySQL для работы с MySQL
  ansible.builtin.package:
    name: python3-pymysql
    state: present
  become: true

- name: Создание директории проекта
  ansible.builtin.file:
    path: "{{ project_dir }}"
    mode: '0750'
    state: directory

- name: Создание директорий для конфигурации
  ansible.builtin.file:
    path: "{{ project_dir }}/{{ item }}"
    mode: '0755'
    state: directory
  loop:
    - galera_config
    - haproxy_config
    - scripts

- name: Проверка существования Galera кластера
  community.docker.docker_container_info:
    name: galera-node1
  register: galera_cluster_exists
  failed_when: false

- name: Создание конфигурации Galera
  ansible.builtin.template:
    src: galera.cnf.j2
    dest: "{{ project_dir }}/galera_config/galera.cnf"
    mode: '0644'

- name: Создание конфигурации HAProxy
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: "{{ project_dir }}/haproxy_config/haproxy.cfg"
    mode: '0644'

- name: Остановка предыдущих контейнеров (только при первом запуске)
  community.docker.docker_compose_v2:
    project_src: "{{ item }}"
    state: absent
  loop:
    - "/home/{{ ansible_user }}/wordpress-docker"
    - "/home/{{ ansible_user }}/wordpress-cluster"
  failed_when: false
  when: not (galera_cluster_exists.exists | default(false))

- name: Миграция данных из предыдущих работ
  ansible.builtin.import_tasks: migrate_data.yml

- name: Создание Docker Compose файла
  ansible.builtin.template:
    src: docker-compose-galera.yml.j2
    dest: "{{ project_dir }}/docker-compose.yml"
    mode: '0644'

- name: Запуск Galera Cluster (только если не запущен)
  community.docker.docker_compose_v2:
    project_src: "{{ project_dir }}"
    state: present
  register: galera_result
  when: not (galera_cluster_exists.exists | default(false))

- name: Проверка состояния существующего кластера
  community.docker.docker_compose_v2:
    project_src: "{{ project_dir }}"
    state: present
  register: galera_status_check
  when: galera_cluster_exists.exists | default(false)

- name: Ожидание запуска первого узла (только при первом развертывании)
  ansible.builtin.wait_for:
    port: 3306
    host: "{{ ansible_default_ipv4.address }}"
    delay: 30
    timeout: 120
  when: not (galera_cluster_exists.exists | default(false))

- name: Проверка готовности первого узла MySQL
  community.mysql.mysql_info:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
  register: mysql_info
  retries: 10
  delay: 10
  until: mysql_info is not failed

- name: Проверка существования пользователей
  community.mysql.mysql_query:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    query: "SELECT User FROM mysql.user WHERE User IN ('{{ galera_sst_user }}', 'exporter')"
  register: existing_users

- name: Проверка существования пользователей
  community.mysql.mysql_query:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    query: "SELECT User FROM mysql.user WHERE User IN ('{{ galera_sst_user }}', 'exporter')"
  register: existing_users

- name: Отладка - вывод результата запроса пользователей
  ansible.builtin.debug:
    msg: "{{ existing_users.query_result }}"

- name: Создание пользователя SST (если не существует)
  community.mysql.mysql_user:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    name: "{{ galera_sst_user }}"
    password: "{{ galera_sst_password }}"
    priv: "*.*:RELOAD,LOCK TABLES,PROCESS,REPLICATION CLIENT"
    host: '%'
    state: present
    column_case_sensitive: false
  when: "galera_sst_user not in (existing_users.query_result[0] | map(attribute='User') | list)"

- name: Создание пользователя exporter (если не существует)
  community.mysql.mysql_user:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    name: "exporter"
    password: "exporter_password"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    host: '%'
    state: present
    column_case_sensitive: false
  when: "'exporter' not in (existing_users.query_result[0] | map(attribute='User') | list)"

- name: Восстановление данных WordPress из бэкапа (только если есть данные)
  community.mysql.mysql_db:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    name: "{{ wordpress_db_name }}"
    state: import
    target: "{{ project_dir }}/wordpress_backup.sql"
  when:
    - final_backup_check.stat.exists
    - final_backup_check.stat.size > 100
    - not (galera_cluster_exists.exists | default(false))
  register: restore_result
  failed_when: false

- name: Проверка статуса кластера
  community.mysql.mysql_query:
    login_host: "{{ ansible_default_ipv4.address }}"
    login_port: 3306
    login_user: root
    login_password: "{{ db_pass }}"
    query: "SHOW STATUS LIKE 'wsrep_cluster_size'"
  register: cluster_status

- name: Вывод размера кластера
  ansible.builtin.debug:
    msg: "Размер Galera кластера: {{ cluster_status.query_result[0][0].Value }}"
  when: cluster_status.query_result | length > 0

- name: Ожидание готовности кластера
  ansible.builtin.pause:
    seconds: 10
  when: not (galera_cluster_exists.exists | default(false))

- name: Проверка существования мониторинга
  community.docker.docker_container_info:
    name: prometheus
  register: monitoring_exists
  failed_when: false

- name: Запуск мониторинга (только если не запущен)
  community.docker.docker_compose_v2:
    project_src: "/home/{{ ansible_user }}/monitoring"
    state: present
  register: monitoring_result
  when: not (monitoring_exists.exists | default(false))
